<?php

namespace Quiz\Repository;

use Doctrine\ORM\EntityRepository;
use Quiz\Entity;

/**
 * Question
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Question extends EntityRepository
{
    public function create(array $data)
    {
        $question = new Entity\Question();
        $question->setTitle($data['title']);
        $question->setContent($data['content']);
        $question->setType($data['type']);
        $question->setIsActive($data['isActive']);

        foreach($data['answers'] as $answerNo => $answerName)
        {
            $isCorrect = (isset($data['correct']) && $data['correct'] == $answerNo);

            $answer = new Entity\Answer();
            $answer->setName($answerName);
            $answer->setIsCorrect($isCorrect);
            $question->addAnswer($answer);
        }

        $em = $this->getEntityManager();
        $em->persist($question);

        try {
            $em->flush();
        } catch (\Exception $e) {
            var_dump(__METHOD__.__LINE__);
            var_dump($e->getMessage());
        }
    }

    public function update(array $data, $id)
    {
        $em = $this->getEntityManager();

        /* @var $question \Quiz\Entity\Question */
        $question = $this->find($id);
        $question->setTitle($data['title']);
        $question->setType($data['type']);
        $question->setIsActive($data['isActive']);

        /**
         * set content, if file is updated
         */
        if (!($question->getType() == $data['type']
            && Entity\Question::TYPE_IMAGE == $data['type']
            && empty($data['content'])))
        {
            $question->setContent($data['content']);
        }


		$answerNo = 0;
        $answers = $question->getAnswers();
        foreach($answers as $answer)
		{
			++$answerNo;
			if (!isset($data['answers'][$answerNo])) {
                $em->remove($answer);
				continue;
			}

			$answerName = $data['answers'][$answerNo];
            $isCorrect = (isset($data['correct']) && $data['correct'] == $answerNo);

            $answer->setName($answerName);
            $answer->setIsCorrect($isCorrect);
        }

        // add missing questions
        while (++$answerNo <= 3)
        {
            $answerName = $data['answers'][$answerNo];
            $isCorrect = (isset($data['correct']) && $data['correct'] == $answerNo);

            $answer = new Entity\Answer();
            $answer->setName($answerName);
            $answer->setIsCorrect($isCorrect);
            $question->addAnswer($answer);
        }

        try {
            $em->flush();
        } catch (\Exception $e) {
            var_dump(__METHOD__.__LINE__);
            var_dump($e->getMessage());
        }
    }

    public function getDataForForm($id)
    {
        /* @var $question \Quiz\Entity\Question */
        $question = $this->find($id);

        $result = array();
        $result['title'] = $question->getTitle();
        $result['content'] = $question->getContent();
        $result['type'] = $question->getType();
        $result['isActive'] = $question->getIsActive();
        $result['answers'] = array();
        $result['correct'] = null;

        $i = 0;
        foreach($question->getAnswers() as $answer)
        {
            ++$i;
            if ($answer->getIsCorrect()) {
                $result['correct'] = $i;
            }
            $result['answers'][$i] = $answer->getName();
        }

        return $result;
    }

    /**
     * @return \Doctrine\ORM\Query
     */
    public function getQueryQuestionList()
    {
        $em = $this->getEntityManager();
        $dql = 'SELECT q, (SELECT a.name FROM Quiz\Entity\Answer a WHERE a.question = q.id AND a.isCorrect = true) AS correct_answer FROM Quiz\Entity\Question q ORDER BY q.id DESC';
        /* @var $q \Doctrine\ORM\Query */
        $q = $em->createQuery($dql);

        return $q;
    }

    public function getQueryStatisticListForUser($userId, $startDate, $endDate)
    {
        $em = $this->getEntityManager();

        // quiestions answered by user
        $sub = 'SELECT COUNT(a.id) FROM Quiz\Entity\QuizAnswer qa JOIN qa.answer a JOIN qa.quiz z WHERE z.user = :userId AND a.question = q.id AND z.date BETWEEN :startDate AND :endDate';
        // count how offen this quiestion was answered
        $answers = 'SELECT COUNT(qaa.id) FROM Quiz\Entity\QuizAnswer qaa JOIN qaa.answer aa WHERE aa.question = q.id';
        // sort quiestion by less used and last answered by user
        $dql = 'SELECT q, (%s) AS top_answers, (%s) AS user_answers FROM Quiz\Entity\Question q WHERE q.isActive = true ORDER BY top_answers ASC, user_answers ASC ';
        // one dql to bind them all
        $dql = sprintf($dql, $answers, $sub);

        /** @var $q  \Doctrine\ORM\Query */
        $q = $em->createQuery($dql);
        $q->setParameter('userId', $userId, \Doctrine\DBAL\Types\Type::INTEGER);
        $q->setParameter('startDate', $startDate);
        $q->setParameter('endDate', $endDate);

        return $q;
    }
}