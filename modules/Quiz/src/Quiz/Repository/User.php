<?php

namespace Quiz\Repository;

use Doctrine\ORM\EntityRepository,
    Doctrine\ORM\Query\ResultSetMapping;

/**
 * User
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class User extends EntityRepository
{
    public function createFacebookUser($facebookId, array $data)
    {
        $user = $this->findOneBy(array('facebookId' => $facebookId));
        if (!$user) {
            $user = new \Quiz\Entity\User();
            $user->setFacebookId($facebookId);
        }

        if (isset($data['first_name']) && isset($data['last_name'])) {
            $user->setFullname(sprintf('%s %s', $data['first_name'] , $data['last_name']));
        }
        elseif(isset($data['name'])) {
            $user->setFullname($data['name']);
        }

        if (isset($data['email'])) {
            $user->setEmail($data['email']);
        }

        $em = $this->getEntityManager();

        try
        {
            $em->persist($user);
            $em->flush();
        } catch (\Exception $e) {
            \Zend\Debug::dump(__METHOD__.__LINE__);
            \Zend\Debug::dump($e->getMessage());
            # todo log
            return false;
        }

        return $user;
    }

    public function inviteTodayFriends($userId)
    {
        $startDate = date('Y-m-d H:i:s', mktime(0,0, 0, date('m'), date('d'), date('Y'))); // from 00:00:00 today
        $endDate = date('Y-m-d H:i:s', mktime(0,0,-1, date('m'), date('d')+1, date('Y'))); // to 23:59:59 today

        $dql = 'SELECT COUNT(u.id) FROM Quiz\Entity\FriendsInvite u WHERE u.userId = :userId AND u.date BETWEEN :startDate AND :endDate';


        /** @var $q  \Doctrine\ORM\Query */
        $q = $this->getEntityManager()->createQuery($dql);
        $q->setParameter('userId', $userId);
        $q->setParameter('startDate', $startDate);
        $q->setParameter('endDate', $endDate);

        if (isset($_GET['debug'])) {
            \Zend\Debug::dump(__METHOD__.__LINE__);
            \Zend\Debug::dump($q->getSQL());
            \Zend\Debug::dump($q->getParameters());
        }

        $result = false;

        try {
            $result = $q->getSingleScalarResult();
        } catch (\Exception $e) {
            if (isset($_GET['debug'])) {
                \Zend\Debug::dump(__METHOD__.__LINE__);
                \Zend\Debug::dump($e->getMessage());
            }
        }

        if (isset($_GET['debug'])) {
            \Zend\Debug::dump(__METHOD__.__LINE__);
            \Zend\Debug::dump(array('$result' => $result));
        }

        return $result;
    }

    public function getQueryUserSummaryList($startDate, $endDate)
    {
        /* @var $em \Doctrine\ORM\EntityManager */
        $em = $this->getEntityManager();

        /*
         * Creating nice query ;)
         */
        {{
            $rsm = new ResultSetMapping;
            $rsm->addScalarResult('points', 'points');
            $rsm->addScalarResult('play_count', 'play_count');
            $rsm->addScalarResult('invited_friend', 'invited_friend');
            $rsm->addScalarResult('avatar', 'avatar');
            $rsm->addScalarResult('id', 'id');
            $rsm->addScalarResult('email', 'email');
            $rsm->addScalarResult('fullname', 'fullname');

            $sql = 'SELECT q0_.facebookId AS avatar, q0_.id, q0_.fullname, q0_.email,

                        (
                            SELECT SUM(q1_.second) * 10 FROM quiz_quiz q2_
                            INNER JOIN quiz_user q3_ ON q2_.user_id = q3_.id
                            INNER JOIN quiz_quiz_answer q1_ ON q2_.id = q1_.quiz_id
                            INNER JOIN quiz_answer q4_ ON q1_.answer_id = q4_.id
                            WHERE q2_.date BETWEEN :startDate AND :endDate
                            AND q2_.isClose = true AND q4_.isCorrect = true
                            AND q3_.id = q0_.id
                            GROUP BY q2_.id
                            ORDER BY 1 DESC
                            LIMIT 1
                        ) AS points,

                        (
                            SELECT COUNT(q5_.id) AS dctrn__2 FROM quiz_quiz q5_
                            WHERE q5_.user_id = q0_.id
                        ) AS play_count,

                        (
                            SELECT COUNT(q6_.id) AS dctrn__3 FROM quiz_friend_invite q6_
                            WHERE q6_.userId = q0_.id
                        ) AS invited_friend

                    FROM quiz_user q0_ ORDER BY points DESC NULLS LAST';

            /** @var $q \Doctrine\ORM\NativeQuery */
            $q = $em->createNativeQuery($sql, $rsm);
        }}

        $q->setParameter('startDate', $startDate);
        $q->setParameter('endDate', $endDate);

        return $q;
    }
}