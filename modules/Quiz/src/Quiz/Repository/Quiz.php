<?php

namespace Quiz\Repository;

use Doctrine\ORM\EntityRepository,
    Quiz\Entity\User;

/**
 * Quiz
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Quiz extends EntityRepository
{
    public function getQuestions(User $user)
    {
        $userId = $user->getId();
        $startDate = date('Y-m-d', mktime(0,0,0, date('m'), date('d') - date('N') + 1, date('Y')));
        $endDate = date('Y-m-d', mktime(0,0,0, date('m'), date('d') - (date('N') - 7), date('Y')));

        $em = $this->getEntityManager();

//        $sub = 'SELECT a.question_id FROM Quiz\Entity\QuizAnswer qa JOIN qa.answer a JOIN qa.quiz z WHERE z.user_id = :userId AND z.date BETWEEN :startData AND :endDate';
//        $dql = 'SELECT q FROM Quiz\Entity\Question q WHERE q.id NOT IN (%s)';
//        $dql = sprintf($dql, $sub);

        // quiestions answered by user
        $sub = 'SELECT COUNT(a.question_id) FROM Quiz\Entity\QuizAnswer qa JOIN qa.answer a JOIN qa.quiz z WHERE z.user_id = :userId AND z.date BETWEEN :startData AND :endDate';
        // count how offen this quiestion was answered
        $answers = 'SELECT COUNT(qaa.id) FROM Quiz\Entity\QuizAnswer qaa JOIN qaa.answer aa WHERE aa.question_id = q.id';
        // sort quiestion by less used and last answered by user
        $dql = 'SELECT q AS question, (%s) AS top_answers, (%s) AS user_answers FROM Quiz\Entity\Question q  ORDER BY top_answers ASC, user_answers ASC ';
        // one dql to bind them all
        $dql = sprintf($dql, $answers, $sub);

        /** @var $q  \Doctrine\ORM\Query */
        $q = $em->createQuery($dql);
        $q->setParameter('userId', $userId, \Doctrine\DBAL\Types\Type::INTEGER);
        $q->setParameter('startData', $startDate);
        $q->setParameter('endDate', $endDate);
        $q->setMaxResults(10);

        $result = array();

//        echo $q->getSQL();
//        echo $q->getDQL();
//        \Zend\Debug::dump($q->getArrayResult());
//        die;
        try {
            $result = $q->getResult();
//            \Doctrine\Common\Util\Debug::dump($result);
        } catch (\Exception $e) {
//            var_dump($e->getMessage());
        }

        $r = array();
        $questionIDs = array();

        /*
         * DQL do not allowe me to sqlect only a.name and a.id and mantaine array structure.
         */
        foreach($result as $data)
        {
            $question = $data['question'];
            $questionIDs[] = $question->getId();
            $r[] = $question->toArray();
        }

//        var_dump($r);

        // select missing
        if (count($questionIDs) < 10)
        {
            if (empty($questionIDs)) {
                $dql = 'SELECT q FROM Quiz\Entity\Question q';
            } else {
                $dql = 'SELECT q FROM Quiz\Entity\Question q WHERE q.id NOT IN (%s)';
                $dql = sprintf($dql, implode(',', $questionIDs));
            }

            /** @var $q  \Doctrine\ORM\Query */
            $q = $em->createQuery($dql);
//            $q->setParameter('questionIDs', $questionIDs);
            $q->setMaxResults(10 - count($questionIDs));

            try {
                $result = $q->getResult();
            } catch (\Exception $e) {
//                \Zend\Debug::dump($e->getMessage());
            }

            /*
            * DQL do not allowe me to sqlect only a.name and a.id and mantaine array structure.
             */
            foreach($result as $question)
            {
                $r[] = $question->toArray();
            }
        }

        $quiz = new \Quiz\Entity\Quiz();
        $quiz->setUserId($userId);
        $quiz->setIsClose(false);

        try
        {
            $em->persist($quiz);
            $em->flush();
        } catch (\Exception $e) {
            \Zend\Debug::dump($e->getMessage());
            # todo log
            return false;
        }

        shuffle($r);

        return array(
            'questions' => $r,
            'quizId' => $quiz->getId()
        );
    }

    public function getResultsForThisWeek()
    {
        $em = $this->getEntityManager();

        $startDate = date('Y-m-d', mktime(0,0,0, date('m'), date('d') - date('N') + 1, date('Y')));
        $endDate = date('Y-m-d', mktime(0,0,0, date('m'), date('d') - (date('N') - 7), date('Y')));

        $dql = 'SELECT SUM(a.second) * 10 points, u.fullname fullname, u.facebookId FROM Quiz\Entity\Quiz q '.
               'JOIN q.user u '.
               'JOIN q.answers a '.
               'JOIN a.answer aa '.
               'WHERE q.date BETWEEN :startData AND :endDate '.
               'AND q.isClose = true AND aa.isCorrect = true '.
               'GROUP BY u.id, u.fullname, u.facebookId ' .
               'ORDER BY points DESC';

        /** @var $q  \Doctrine\ORM\Query */
        $q = $em->createQuery($dql);
        $q->setMaxResults(10);
        $q->setParameter('startData', $startDate);
        $q->setParameter('endDate', $endDate);

//        echo $q->getSQL();
//        \Zend\Debug::dump($q->getParameters());
        $result = array();

        try {
            $result = $q->getArrayResult();
        } catch (\Exception $e) {
            \Zend\Debug::dump($e);
            # todo log
            return false;
        }

        return $result;
    }

    public function saveAnswersForQuiz($quizId, $facebookUserId, array $answers)
    {
        /** @var $quiz \Quiz\Entity\Quiz */
        $quiz = $this->find($quizId);
//        \Zend\Debug::dump($quizId);
//        \Zend\Debug::dump($quiz->getId());
//        if (!$quiz) {
//            # todo log
//            return false;
//        }

        if ($quiz->getIsClose()) {
//            \Zend\Debug::dump(__LINE__);
            # todo log
            return false;
        }

        if ($quiz->getUser()->getFacebookId() != $facebookUserId) {
//            \Zend\Debug::dump(__LINE__);
            # todo log
            return false;
        }

        $em = $this->getEntityManager();

        /** @var $answerRepository \Quiz\Entity\Answer */
        $answerRepository = $em->getRepository('Quiz\Entity\Answer');

        foreach($answers as $data)
        {
            $quizAnswer = new \Quiz\Entity\QuizAnswer();

            if (isset($data['answerId']))
            {
                $questionId = (int) $data['questionId'];
                $answerId   = (int) $data['answerId'];
                $second     = (int) $data['second'];

                /** @var $answer \Quiz\Entity\Answer  */
                $answer = $answerRepository->find($answerId);
                if (!$answer instanceof \Quiz\Entity\Answer) {
                    # todo log
                    return false;
                }

                if ($answer->getQuestion()->getId() != $questionId) {
                    # todo log
                    return false;
                }

                $quizAnswer->setAnswer($answer);
                $quizAnswer->setSecond($second);
                $quiz->addAnswer($quizAnswer);
            }
            else
            {
                $answerId   = null;
                $second     = 0;
            }
        }

        $quiz->setIsClose(true);

        try
        {
            $em->persist($quiz);
            $em->flush($quiz);
        } catch (\Exception $e) {
//            \Zend\Debug::dump(__LINE__);
//            \Zend\Debug::dump($e->getMessage());
            # todo log
            return false;
        }

        return true;
    }

    public function getResults()
    {
        $dql = 'SELECT q, a FROM Quiz\Entity\Question q JOIN q.answers a';


        /** @var $q  \Doctrine\ORM\QueryBuilder */
        $q = $this->getEntityManager()->createQuery($dql);
        $q->setMaxResults(10);

        $result = array();

        try {
            $result = $q->getArrayResult();
        } catch (\Exception $e) {
            # todo log
            return false;
        }

        return $result;
    }

    public function canPlayAgain($userId)
    {
        $startDate = date('Y-m-d H:i:s', mktime(0,0, 0, date('m'), date('d'), date('Y'))); // from 00:00:00 today
        $endDate = date('Y-m-d H:i:s', mktime(0,0,-1, date('m'), date('d')+1, date('Y'))); // to 23:59:59 today

        $dql = 'SELECT COUNT(q.id) FROM Quiz\Entity\Quiz q WHERE q.user = :userId AND q.date BETWEEN :startDate AND :endDate AND q.isClose = true';


        /** @var $q  \Doctrine\ORM\Query */
        $q = $this->getEntityManager()->createQuery($dql);
        $q->setMaxResults(1);
        $q->setParameter('userId', $userId);
        $q->setParameter('startDate', $startDate);
        $q->setParameter('endDate', $endDate);

        if (isset($_GET['debug'])) {
            echo $q->getSQL();
            print_r($q->getParameters());
        }

        $result = 0;

        try {
            $result = $q->getSingleScalarResult();
//            $result = ($result > 2) ? false : true;
        } catch (\Exception $e) {
            if (isset($_GET['debug'])) {
                \Zend\Debug::dump(__METHOD__.__LINE__);
                \Zend\Debug::dump($e->getMessage());
            }
            # todo log
            return false;
        }

        if (isset($_GET['debug'])) {
            \Zend\Debug::dump($result);
        }

        switch($result)
        {
            case 1:
                /** @var $user \Quiz\Repository\User */
                $user = $this->getEntityManager()->getRepository('Quiz\Entity\User');
                $ci = $user->inviteTodayFriends($userId);
                if (isset($_GET['debug'])) {
                    \Zend\Debug::dump(__METHOD__.__LINE__);
                    \Zend\Debug::dump(array('$ci' => $ci));
                }
                if ($ci) {
                    return true;
                }
                return false;

            case 2:
                return false;
        }

        return $result < 1;
    }

    public function clearTodayUserPlay($userId)
    {
        $startDate = date('Y-m-d H:i:s', mktime(0,0, 0, date('m'), date('d'), date('Y'))); // from 00:00:00 today
        $endDate = date('Y-m-d H:i:s', mktime(0,0,-1, date('m'), date('d')+1, date('Y'))); // to 23:59:59 today

        $dql = 'SELECT q FROM Quiz\Entity\Quiz q WHERE q.user = :userId AND q.date BETWEEN :startDate AND :endDate AND q.isClose = true';

        $em = $this->getEntityManager();
        /** @var $q  \Doctrine\ORM\Query */
        $q = $em->createQuery($dql);
        $q->setParameter('userId', $userId);
        $q->setParameter('startDate', $startDate);
        $q->setParameter('endDate', $endDate);

        try {
            $quizes = $q->getResult();
            foreach($quizes as $quiz) {
                $em->remove($quiz);
            }
            $em->flush();
        } catch (\Exception $e) {
            \Zend\Debug::dump(__METHOD__.__LINE__);
            \Zend\Debug::dump($e->getMessage());
            # todo log
            return false;
        }
    }
}